from fastapi import APIRouter, HTTPException, Depends, Path, Body, status
from typing import Optional, List
from models.draft import DraftRequest, DraftResponse, DraftListResponse
from services.gmail_service import GmailService
from services.draft_service import DraftService
from dependencies import validate_gmail_client


router = APIRouter()


@router.post("/generate/{email_id}", response_model=DraftResponse)
async def generate_draft(
    email_id: str = Path(..., description="Email ID to generate a draft for"),
    custom_instructions: Optional[str] = None,
    request_body: Optional[dict] = Body(default=None),
    gmail: GmailService = Depends(validate_gmail_client)
):
    """
    Generate a draft reply for a specific email
    
    Creates a draft reply to the specified email and stores it in Gmail
    """
    # Extract custom_instructions from request body if provided and not directly passed
    if custom_instructions is None and request_body and "custom_instructions" in request_body:
        custom_instructions = request_body.get("custom_instructions")
    try:
        # Create draft service
        draft_service = DraftService(gmail_service=gmail)
        
        # Generate draft
        draft = draft_service.generate_reply_draft(
            email_id=email_id, 
            custom_instructions=custom_instructions
        )
        
        if not draft:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Could not generate draft for email with ID {email_id}"
            )
            
        return draft
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error generating draft: {str(e)}"
        )


@router.get("/list", response_model=DraftListResponse)
async def list_drafts(gmail: GmailService = Depends(validate_gmail_client)):
    """
    List all generated drafts
    
    Returns a list of all drafts generated by the application
    """
    try:
        # Create draft service
        draft_service = DraftService(gmail_service=gmail)
        
        # List drafts
        drafts = draft_service.list_drafts()
        
        return DraftListResponse(
            drafts=drafts,
            total=len(drafts)
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error listing drafts: {str(e)}"
        )


@router.get("/{draft_id}", response_model=DraftResponse)
async def get_draft(
    draft_id: str = Path(..., description="Draft ID to fetch"),
    gmail: GmailService = Depends(validate_gmail_client)
):
    """
    Get a specific draft by ID
    
    Returns detailed information about the specified draft
    """
    try:
        # Create draft service
        draft_service = DraftService(gmail_service=gmail)
        
        # Get draft
        draft = draft_service.get_draft(draft_id)
        
        if not draft:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail=f"Draft with ID {draft_id} not found"
            )
            
        return draft
        
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error getting draft: {str(e)}"
        )
